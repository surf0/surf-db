basePath: /api/v1
definitions:
  ent.RecordKsf:
    properties:
      id:
        description: ID of the ent.
        type: string
      improvement:
        description: Improvement holds the value of the "improvement" field.
        type: string
      map_name:
        description: MapName holds the value of the "map_name" field.
        type: string
      player_name:
        description: PlayerName holds the value of the "player_name" field.
        type: string
      server:
        description: Server holds the value of the "server" field.
        type: string
      time:
        description: Time holds the value of the "time" field.
        type: string
      timestamp:
        description: Timestamp holds the value of the "timestamp" field.
        type: string
    type: object
  ent.RecordSh:
    properties:
      id:
        description: ID of the ent.
        type: string
      improvement:
        description: Improvement holds the value of the "improvement" field.
        type: string
      map_name:
        description: MapName holds the value of the "map_name" field.
        type: string
      player_id:
        description: PlayerID holds the value of the "player_id" field.
        type: string
      player_name:
        description: PlayerName holds the value of the "player_name" field.
        type: string
      server:
        description: Server holds the value of the "server" field.
        type: string
      time:
        description: Time holds the value of the "time" field.
        type: string
      timestamp:
        description: Timestamp holds the value of the "timestamp" field.
        type: string
      track:
        description: Track holds the value of the "track" field.
        type: integer
      type:
        description: Type holds the value of the "type" field.
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: 'CS:GO & CS:S surf record and map data. Github: https://github.com/surf0/surf-db'
  title: Surf DB API
  version: "1.0"
paths:
  /ksf/records/map/{mapname}:
    get:
      parameters:
      - description: map name e.g. surf_summit
        in: path
        name: mapname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RecordKsf'
            type: array
      summary: get all records for map by map name
      tags:
      - ksf
  /sh/records/bonus/{mapname}/:
    get:
      parameters:
      - description: map name e.g. surf_summit
        in: path
        name: mapname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RecordSh'
            type: array
      summary: get all records for all bonuses
      tags:
      - surfheaven
  /sh/records/bonus/{mapname}/{bonus}:
    get:
      parameters:
      - description: map name e.g. surf_summit
        in: path
        name: mapname
        required: true
        type: string
      - description: bonus e.g. 1, 2, ...
        in: path
        name: bonus
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RecordSh'
            type: array
      summary: get all records for specific bonus
      tags:
      - surfheaven
  /sh/records/map/{mapname}:
    get:
      parameters:
      - description: map name e.g. surf_summit
        in: path
        name: mapname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RecordSh'
            type: array
      summary: get all records for map by map name
      tags:
      - surfheaven
  /sh/records/stage/{mapname}/:
    get:
      parameters:
      - description: map name e.g. surf_summit
        in: path
        name: mapname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RecordSh'
            type: array
      summary: get all records for all stages
      tags:
      - surfheaven
  /sh/records/stage/{mapname}/{stage}:
    get:
      parameters:
      - description: map name e.g. surf_summit
        in: path
        name: mapname
        required: true
        type: string
      - description: stage e.g. 1, 2, ...
        in: path
        name: stage
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RecordSh'
            type: array
      summary: get all records for specific stage
      tags:
      - surfheaven
swagger: "2.0"
tags:
- description: surfheaven.eu CS:GO surf servers
  name: surfheaven
- description: KSF CS:S surf servers
  name: ksf
