// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/ent/predicate"
	"server/ent/recordsh"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRecordSh = "RecordSh"
)

// RecordShMutation represents an operation that mutates the RecordSh nodes in the graph.
type RecordShMutation struct {
	config
	op            Op
	typ           string
	id            *string
	timestamp     *time.Time
	player_name   *string
	player_id     *string
	_type         *string
	track         *int
	addtrack      *int
	map_name      *string
	time          *string
	improvement   *string
	server        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RecordSh, error)
	predicates    []predicate.RecordSh
}

var _ ent.Mutation = (*RecordShMutation)(nil)

// recordshOption allows management of the mutation configuration using functional options.
type recordshOption func(*RecordShMutation)

// newRecordShMutation creates new mutation for the RecordSh entity.
func newRecordShMutation(c config, op Op, opts ...recordshOption) *RecordShMutation {
	m := &RecordShMutation{
		config:        c,
		op:            op,
		typ:           TypeRecordSh,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecordShID sets the ID field of the mutation.
func withRecordShID(id string) recordshOption {
	return func(m *RecordShMutation) {
		var (
			err   error
			once  sync.Once
			value *RecordSh
		)
		m.oldValue = func(ctx context.Context) (*RecordSh, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RecordSh.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecordSh sets the old RecordSh of the mutation.
func withRecordSh(node *RecordSh) recordshOption {
	return func(m *RecordShMutation) {
		m.oldValue = func(context.Context) (*RecordSh, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecordShMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecordShMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RecordSh entities.
func (m *RecordShMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecordShMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RecordShMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RecordSh.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTimestamp sets the "timestamp" field.
func (m *RecordShMutation) SetTimestamp(t time.Time) {
	m.timestamp = &t
}

// Timestamp returns the value of the "timestamp" field in the mutation.
func (m *RecordShMutation) Timestamp() (r time.Time, exists bool) {
	v := m.timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldTimestamp returns the old "timestamp" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimestamp: %w", err)
	}
	return oldValue.Timestamp, nil
}

// ResetTimestamp resets all changes to the "timestamp" field.
func (m *RecordShMutation) ResetTimestamp() {
	m.timestamp = nil
}

// SetPlayerName sets the "player_name" field.
func (m *RecordShMutation) SetPlayerName(s string) {
	m.player_name = &s
}

// PlayerName returns the value of the "player_name" field in the mutation.
func (m *RecordShMutation) PlayerName() (r string, exists bool) {
	v := m.player_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerName returns the old "player_name" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldPlayerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerName: %w", err)
	}
	return oldValue.PlayerName, nil
}

// ResetPlayerName resets all changes to the "player_name" field.
func (m *RecordShMutation) ResetPlayerName() {
	m.player_name = nil
}

// SetPlayerID sets the "player_id" field.
func (m *RecordShMutation) SetPlayerID(s string) {
	m.player_id = &s
}

// PlayerID returns the value of the "player_id" field in the mutation.
func (m *RecordShMutation) PlayerID() (r string, exists bool) {
	v := m.player_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlayerID returns the old "player_id" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldPlayerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlayerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlayerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlayerID: %w", err)
	}
	return oldValue.PlayerID, nil
}

// ResetPlayerID resets all changes to the "player_id" field.
func (m *RecordShMutation) ResetPlayerID() {
	m.player_id = nil
}

// SetType sets the "type" field.
func (m *RecordShMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *RecordShMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RecordShMutation) ResetType() {
	m._type = nil
}

// SetTrack sets the "track" field.
func (m *RecordShMutation) SetTrack(i int) {
	m.track = &i
	m.addtrack = nil
}

// Track returns the value of the "track" field in the mutation.
func (m *RecordShMutation) Track() (r int, exists bool) {
	v := m.track
	if v == nil {
		return
	}
	return *v, true
}

// OldTrack returns the old "track" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldTrack(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrack: %w", err)
	}
	return oldValue.Track, nil
}

// AddTrack adds i to the "track" field.
func (m *RecordShMutation) AddTrack(i int) {
	if m.addtrack != nil {
		*m.addtrack += i
	} else {
		m.addtrack = &i
	}
}

// AddedTrack returns the value that was added to the "track" field in this mutation.
func (m *RecordShMutation) AddedTrack() (r int, exists bool) {
	v := m.addtrack
	if v == nil {
		return
	}
	return *v, true
}

// ResetTrack resets all changes to the "track" field.
func (m *RecordShMutation) ResetTrack() {
	m.track = nil
	m.addtrack = nil
}

// SetMapName sets the "map_name" field.
func (m *RecordShMutation) SetMapName(s string) {
	m.map_name = &s
}

// MapName returns the value of the "map_name" field in the mutation.
func (m *RecordShMutation) MapName() (r string, exists bool) {
	v := m.map_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMapName returns the old "map_name" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldMapName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMapName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMapName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMapName: %w", err)
	}
	return oldValue.MapName, nil
}

// ResetMapName resets all changes to the "map_name" field.
func (m *RecordShMutation) ResetMapName() {
	m.map_name = nil
}

// SetTime sets the "time" field.
func (m *RecordShMutation) SetTime(s string) {
	m.time = &s
}

// Time returns the value of the "time" field in the mutation.
func (m *RecordShMutation) Time() (r string, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *RecordShMutation) ResetTime() {
	m.time = nil
}

// SetImprovement sets the "improvement" field.
func (m *RecordShMutation) SetImprovement(s string) {
	m.improvement = &s
}

// Improvement returns the value of the "improvement" field in the mutation.
func (m *RecordShMutation) Improvement() (r string, exists bool) {
	v := m.improvement
	if v == nil {
		return
	}
	return *v, true
}

// OldImprovement returns the old "improvement" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldImprovement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImprovement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImprovement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImprovement: %w", err)
	}
	return oldValue.Improvement, nil
}

// ResetImprovement resets all changes to the "improvement" field.
func (m *RecordShMutation) ResetImprovement() {
	m.improvement = nil
}

// SetServer sets the "server" field.
func (m *RecordShMutation) SetServer(s string) {
	m.server = &s
}

// Server returns the value of the "server" field in the mutation.
func (m *RecordShMutation) Server() (r string, exists bool) {
	v := m.server
	if v == nil {
		return
	}
	return *v, true
}

// OldServer returns the old "server" field's value of the RecordSh entity.
// If the RecordSh object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecordShMutation) OldServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServer: %w", err)
	}
	return oldValue.Server, nil
}

// ResetServer resets all changes to the "server" field.
func (m *RecordShMutation) ResetServer() {
	m.server = nil
}

// Where appends a list predicates to the RecordShMutation builder.
func (m *RecordShMutation) Where(ps ...predicate.RecordSh) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RecordShMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RecordSh).
func (m *RecordShMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecordShMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.timestamp != nil {
		fields = append(fields, recordsh.FieldTimestamp)
	}
	if m.player_name != nil {
		fields = append(fields, recordsh.FieldPlayerName)
	}
	if m.player_id != nil {
		fields = append(fields, recordsh.FieldPlayerID)
	}
	if m._type != nil {
		fields = append(fields, recordsh.FieldType)
	}
	if m.track != nil {
		fields = append(fields, recordsh.FieldTrack)
	}
	if m.map_name != nil {
		fields = append(fields, recordsh.FieldMapName)
	}
	if m.time != nil {
		fields = append(fields, recordsh.FieldTime)
	}
	if m.improvement != nil {
		fields = append(fields, recordsh.FieldImprovement)
	}
	if m.server != nil {
		fields = append(fields, recordsh.FieldServer)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecordShMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recordsh.FieldTimestamp:
		return m.Timestamp()
	case recordsh.FieldPlayerName:
		return m.PlayerName()
	case recordsh.FieldPlayerID:
		return m.PlayerID()
	case recordsh.FieldType:
		return m.GetType()
	case recordsh.FieldTrack:
		return m.Track()
	case recordsh.FieldMapName:
		return m.MapName()
	case recordsh.FieldTime:
		return m.Time()
	case recordsh.FieldImprovement:
		return m.Improvement()
	case recordsh.FieldServer:
		return m.Server()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecordShMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recordsh.FieldTimestamp:
		return m.OldTimestamp(ctx)
	case recordsh.FieldPlayerName:
		return m.OldPlayerName(ctx)
	case recordsh.FieldPlayerID:
		return m.OldPlayerID(ctx)
	case recordsh.FieldType:
		return m.OldType(ctx)
	case recordsh.FieldTrack:
		return m.OldTrack(ctx)
	case recordsh.FieldMapName:
		return m.OldMapName(ctx)
	case recordsh.FieldTime:
		return m.OldTime(ctx)
	case recordsh.FieldImprovement:
		return m.OldImprovement(ctx)
	case recordsh.FieldServer:
		return m.OldServer(ctx)
	}
	return nil, fmt.Errorf("unknown RecordSh field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecordShMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recordsh.FieldTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimestamp(v)
		return nil
	case recordsh.FieldPlayerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerName(v)
		return nil
	case recordsh.FieldPlayerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlayerID(v)
		return nil
	case recordsh.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case recordsh.FieldTrack:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrack(v)
		return nil
	case recordsh.FieldMapName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMapName(v)
		return nil
	case recordsh.FieldTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case recordsh.FieldImprovement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImprovement(v)
		return nil
	case recordsh.FieldServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServer(v)
		return nil
	}
	return fmt.Errorf("unknown RecordSh field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecordShMutation) AddedFields() []string {
	var fields []string
	if m.addtrack != nil {
		fields = append(fields, recordsh.FieldTrack)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecordShMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recordsh.FieldTrack:
		return m.AddedTrack()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecordShMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recordsh.FieldTrack:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTrack(v)
		return nil
	}
	return fmt.Errorf("unknown RecordSh numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecordShMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecordShMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecordShMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RecordSh nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecordShMutation) ResetField(name string) error {
	switch name {
	case recordsh.FieldTimestamp:
		m.ResetTimestamp()
		return nil
	case recordsh.FieldPlayerName:
		m.ResetPlayerName()
		return nil
	case recordsh.FieldPlayerID:
		m.ResetPlayerID()
		return nil
	case recordsh.FieldType:
		m.ResetType()
		return nil
	case recordsh.FieldTrack:
		m.ResetTrack()
		return nil
	case recordsh.FieldMapName:
		m.ResetMapName()
		return nil
	case recordsh.FieldTime:
		m.ResetTime()
		return nil
	case recordsh.FieldImprovement:
		m.ResetImprovement()
		return nil
	case recordsh.FieldServer:
		m.ResetServer()
		return nil
	}
	return fmt.Errorf("unknown RecordSh field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecordShMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecordShMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecordShMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecordShMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecordShMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecordShMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecordShMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RecordSh unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecordShMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RecordSh edge %s", name)
}
