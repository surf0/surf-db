// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/ent/predicate"
	"server/ent/recordksf"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecordKsfQuery is the builder for querying RecordKsf entities.
type RecordKsfQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RecordKsf
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecordKsfQuery builder.
func (rkq *RecordKsfQuery) Where(ps ...predicate.RecordKsf) *RecordKsfQuery {
	rkq.predicates = append(rkq.predicates, ps...)
	return rkq
}

// Limit adds a limit step to the query.
func (rkq *RecordKsfQuery) Limit(limit int) *RecordKsfQuery {
	rkq.limit = &limit
	return rkq
}

// Offset adds an offset step to the query.
func (rkq *RecordKsfQuery) Offset(offset int) *RecordKsfQuery {
	rkq.offset = &offset
	return rkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rkq *RecordKsfQuery) Unique(unique bool) *RecordKsfQuery {
	rkq.unique = &unique
	return rkq
}

// Order adds an order step to the query.
func (rkq *RecordKsfQuery) Order(o ...OrderFunc) *RecordKsfQuery {
	rkq.order = append(rkq.order, o...)
	return rkq
}

// First returns the first RecordKsf entity from the query.
// Returns a *NotFoundError when no RecordKsf was found.
func (rkq *RecordKsfQuery) First(ctx context.Context) (*RecordKsf, error) {
	nodes, err := rkq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recordksf.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rkq *RecordKsfQuery) FirstX(ctx context.Context) *RecordKsf {
	node, err := rkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecordKsf ID from the query.
// Returns a *NotFoundError when no RecordKsf ID was found.
func (rkq *RecordKsfQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rkq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recordksf.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rkq *RecordKsfQuery) FirstIDX(ctx context.Context) string {
	id, err := rkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecordKsf entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RecordKsf entity is found.
// Returns a *NotFoundError when no RecordKsf entities are found.
func (rkq *RecordKsfQuery) Only(ctx context.Context) (*RecordKsf, error) {
	nodes, err := rkq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recordksf.Label}
	default:
		return nil, &NotSingularError{recordksf.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rkq *RecordKsfQuery) OnlyX(ctx context.Context) *RecordKsf {
	node, err := rkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecordKsf ID in the query.
// Returns a *NotSingularError when more than one RecordKsf ID is found.
// Returns a *NotFoundError when no entities are found.
func (rkq *RecordKsfQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rkq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recordksf.Label}
	default:
		err = &NotSingularError{recordksf.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rkq *RecordKsfQuery) OnlyIDX(ctx context.Context) string {
	id, err := rkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecordKsfs.
func (rkq *RecordKsfQuery) All(ctx context.Context) ([]*RecordKsf, error) {
	if err := rkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rkq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rkq *RecordKsfQuery) AllX(ctx context.Context) []*RecordKsf {
	nodes, err := rkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecordKsf IDs.
func (rkq *RecordKsfQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := rkq.Select(recordksf.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rkq *RecordKsfQuery) IDsX(ctx context.Context) []string {
	ids, err := rkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rkq *RecordKsfQuery) Count(ctx context.Context) (int, error) {
	if err := rkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rkq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rkq *RecordKsfQuery) CountX(ctx context.Context) int {
	count, err := rkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rkq *RecordKsfQuery) Exist(ctx context.Context) (bool, error) {
	if err := rkq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rkq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rkq *RecordKsfQuery) ExistX(ctx context.Context) bool {
	exist, err := rkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecordKsfQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rkq *RecordKsfQuery) Clone() *RecordKsfQuery {
	if rkq == nil {
		return nil
	}
	return &RecordKsfQuery{
		config:     rkq.config,
		limit:      rkq.limit,
		offset:     rkq.offset,
		order:      append([]OrderFunc{}, rkq.order...),
		predicates: append([]predicate.RecordKsf{}, rkq.predicates...),
		// clone intermediate query.
		sql:    rkq.sql.Clone(),
		path:   rkq.path,
		unique: rkq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Timestamp time.Time `json:"timestamp,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecordKsf.Query().
//		GroupBy(recordksf.FieldTimestamp).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rkq *RecordKsfQuery) GroupBy(field string, fields ...string) *RecordKsfGroupBy {
	grbuild := &RecordKsfGroupBy{config: rkq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rkq.sqlQuery(ctx), nil
	}
	grbuild.label = recordksf.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Timestamp time.Time `json:"timestamp,omitempty"`
//	}
//
//	client.RecordKsf.Query().
//		Select(recordksf.FieldTimestamp).
//		Scan(ctx, &v)
func (rkq *RecordKsfQuery) Select(fields ...string) *RecordKsfSelect {
	rkq.fields = append(rkq.fields, fields...)
	selbuild := &RecordKsfSelect{RecordKsfQuery: rkq}
	selbuild.label = recordksf.Label
	selbuild.flds, selbuild.scan = &rkq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a RecordKsfSelect configured with the given aggregations.
func (rkq *RecordKsfQuery) Aggregate(fns ...AggregateFunc) *RecordKsfSelect {
	return rkq.Select().Aggregate(fns...)
}

func (rkq *RecordKsfQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rkq.fields {
		if !recordksf.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rkq.path != nil {
		prev, err := rkq.path(ctx)
		if err != nil {
			return err
		}
		rkq.sql = prev
	}
	return nil
}

func (rkq *RecordKsfQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RecordKsf, error) {
	var (
		nodes = []*RecordKsf{}
		_spec = rkq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RecordKsf).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RecordKsf{config: rkq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (rkq *RecordKsfQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rkq.querySpec()
	_spec.Node.Columns = rkq.fields
	if len(rkq.fields) > 0 {
		_spec.Unique = rkq.unique != nil && *rkq.unique
	}
	return sqlgraph.CountNodes(ctx, rkq.driver, _spec)
}

func (rkq *RecordKsfQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := rkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (rkq *RecordKsfQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recordksf.Table,
			Columns: recordksf.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: recordksf.FieldID,
			},
		},
		From:   rkq.sql,
		Unique: true,
	}
	if unique := rkq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rkq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recordksf.FieldID)
		for i := range fields {
			if fields[i] != recordksf.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rkq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rkq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rkq *RecordKsfQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rkq.driver.Dialect())
	t1 := builder.Table(recordksf.Table)
	columns := rkq.fields
	if len(columns) == 0 {
		columns = recordksf.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rkq.sql != nil {
		selector = rkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rkq.unique != nil && *rkq.unique {
		selector.Distinct()
	}
	for _, p := range rkq.predicates {
		p(selector)
	}
	for _, p := range rkq.order {
		p(selector)
	}
	if offset := rkq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rkq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecordKsfGroupBy is the group-by builder for RecordKsf entities.
type RecordKsfGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rkgb *RecordKsfGroupBy) Aggregate(fns ...AggregateFunc) *RecordKsfGroupBy {
	rkgb.fns = append(rkgb.fns, fns...)
	return rkgb
}

// Scan applies the group-by query and scans the result into the given value.
func (rkgb *RecordKsfGroupBy) Scan(ctx context.Context, v any) error {
	query, err := rkgb.path(ctx)
	if err != nil {
		return err
	}
	rkgb.sql = query
	return rkgb.sqlScan(ctx, v)
}

func (rkgb *RecordKsfGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range rkgb.fields {
		if !recordksf.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rkgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rkgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rkgb *RecordKsfGroupBy) sqlQuery() *sql.Selector {
	selector := rkgb.sql.Select()
	aggregation := make([]string, 0, len(rkgb.fns))
	for _, fn := range rkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rkgb.fields)+len(rkgb.fns))
		for _, f := range rkgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rkgb.fields...)...)
}

// RecordKsfSelect is the builder for selecting fields of RecordKsf entities.
type RecordKsfSelect struct {
	*RecordKsfQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rks *RecordKsfSelect) Aggregate(fns ...AggregateFunc) *RecordKsfSelect {
	rks.fns = append(rks.fns, fns...)
	return rks
}

// Scan applies the selector query and scans the result into the given value.
func (rks *RecordKsfSelect) Scan(ctx context.Context, v any) error {
	if err := rks.prepareQuery(ctx); err != nil {
		return err
	}
	rks.sql = rks.RecordKsfQuery.sqlQuery(ctx)
	return rks.sqlScan(ctx, v)
}

func (rks *RecordKsfSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(rks.fns))
	for _, fn := range rks.fns {
		aggregation = append(aggregation, fn(rks.sql))
	}
	switch n := len(*rks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		rks.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		rks.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := rks.sql.Query()
	if err := rks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
