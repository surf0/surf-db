// Code generated by ent, DO NOT EDIT.

package recordsh

import (
	"server/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// PlayerName applies equality check predicate on the "player_name" field. It's identical to PlayerNameEQ.
func PlayerName(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerName), v))
	})
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Track applies equality check predicate on the "track" field. It's identical to TrackEQ.
func Track(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrack), v))
	})
}

// MapName applies equality check predicate on the "map_name" field. It's identical to MapNameEQ.
func MapName(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMapName), v))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// Improvement applies equality check predicate on the "improvement" field. It's identical to ImprovementEQ.
func Improvement(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImprovement), v))
	})
}

// Server applies equality check predicate on the "server" field. It's identical to ServerEQ.
func Server(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServer), v))
	})
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimestamp), v))
	})
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimestamp), v))
	})
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimestamp), v...))
	})
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimestamp), v...))
	})
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimestamp), v))
	})
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimestamp), v))
	})
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimestamp), v))
	})
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimestamp), v))
	})
}

// PlayerNameEQ applies the EQ predicate on the "player_name" field.
func PlayerNameEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerName), v))
	})
}

// PlayerNameNEQ applies the NEQ predicate on the "player_name" field.
func PlayerNameNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlayerName), v))
	})
}

// PlayerNameIn applies the In predicate on the "player_name" field.
func PlayerNameIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlayerName), v...))
	})
}

// PlayerNameNotIn applies the NotIn predicate on the "player_name" field.
func PlayerNameNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlayerName), v...))
	})
}

// PlayerNameGT applies the GT predicate on the "player_name" field.
func PlayerNameGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlayerName), v))
	})
}

// PlayerNameGTE applies the GTE predicate on the "player_name" field.
func PlayerNameGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlayerName), v))
	})
}

// PlayerNameLT applies the LT predicate on the "player_name" field.
func PlayerNameLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlayerName), v))
	})
}

// PlayerNameLTE applies the LTE predicate on the "player_name" field.
func PlayerNameLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlayerName), v))
	})
}

// PlayerNameContains applies the Contains predicate on the "player_name" field.
func PlayerNameContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlayerName), v))
	})
}

// PlayerNameHasPrefix applies the HasPrefix predicate on the "player_name" field.
func PlayerNameHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlayerName), v))
	})
}

// PlayerNameHasSuffix applies the HasSuffix predicate on the "player_name" field.
func PlayerNameHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlayerName), v))
	})
}

// PlayerNameEqualFold applies the EqualFold predicate on the "player_name" field.
func PlayerNameEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlayerName), v))
	})
}

// PlayerNameContainsFold applies the ContainsFold predicate on the "player_name" field.
func PlayerNameContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlayerName), v))
	})
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlayerID), v))
	})
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlayerID), v))
	})
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPlayerID), v...))
	})
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPlayerID), v...))
	})
}

// PlayerIDGT applies the GT predicate on the "player_id" field.
func PlayerIDGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlayerID), v))
	})
}

// PlayerIDGTE applies the GTE predicate on the "player_id" field.
func PlayerIDGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlayerID), v))
	})
}

// PlayerIDLT applies the LT predicate on the "player_id" field.
func PlayerIDLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlayerID), v))
	})
}

// PlayerIDLTE applies the LTE predicate on the "player_id" field.
func PlayerIDLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlayerID), v))
	})
}

// PlayerIDContains applies the Contains predicate on the "player_id" field.
func PlayerIDContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlayerID), v))
	})
}

// PlayerIDHasPrefix applies the HasPrefix predicate on the "player_id" field.
func PlayerIDHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlayerID), v))
	})
}

// PlayerIDHasSuffix applies the HasSuffix predicate on the "player_id" field.
func PlayerIDHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlayerID), v))
	})
}

// PlayerIDEqualFold applies the EqualFold predicate on the "player_id" field.
func PlayerIDEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlayerID), v))
	})
}

// PlayerIDContainsFold applies the ContainsFold predicate on the "player_id" field.
func PlayerIDContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlayerID), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// TrackEQ applies the EQ predicate on the "track" field.
func TrackEQ(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrack), v))
	})
}

// TrackNEQ applies the NEQ predicate on the "track" field.
func TrackNEQ(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrack), v))
	})
}

// TrackIn applies the In predicate on the "track" field.
func TrackIn(vs ...int) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTrack), v...))
	})
}

// TrackNotIn applies the NotIn predicate on the "track" field.
func TrackNotIn(vs ...int) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTrack), v...))
	})
}

// TrackGT applies the GT predicate on the "track" field.
func TrackGT(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrack), v))
	})
}

// TrackGTE applies the GTE predicate on the "track" field.
func TrackGTE(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrack), v))
	})
}

// TrackLT applies the LT predicate on the "track" field.
func TrackLT(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrack), v))
	})
}

// TrackLTE applies the LTE predicate on the "track" field.
func TrackLTE(v int) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrack), v))
	})
}

// MapNameEQ applies the EQ predicate on the "map_name" field.
func MapNameEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMapName), v))
	})
}

// MapNameNEQ applies the NEQ predicate on the "map_name" field.
func MapNameNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMapName), v))
	})
}

// MapNameIn applies the In predicate on the "map_name" field.
func MapNameIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMapName), v...))
	})
}

// MapNameNotIn applies the NotIn predicate on the "map_name" field.
func MapNameNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMapName), v...))
	})
}

// MapNameGT applies the GT predicate on the "map_name" field.
func MapNameGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMapName), v))
	})
}

// MapNameGTE applies the GTE predicate on the "map_name" field.
func MapNameGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMapName), v))
	})
}

// MapNameLT applies the LT predicate on the "map_name" field.
func MapNameLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMapName), v))
	})
}

// MapNameLTE applies the LTE predicate on the "map_name" field.
func MapNameLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMapName), v))
	})
}

// MapNameContains applies the Contains predicate on the "map_name" field.
func MapNameContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMapName), v))
	})
}

// MapNameHasPrefix applies the HasPrefix predicate on the "map_name" field.
func MapNameHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMapName), v))
	})
}

// MapNameHasSuffix applies the HasSuffix predicate on the "map_name" field.
func MapNameHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMapName), v))
	})
}

// MapNameEqualFold applies the EqualFold predicate on the "map_name" field.
func MapNameEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMapName), v))
	})
}

// MapNameContainsFold applies the ContainsFold predicate on the "map_name" field.
func MapNameContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMapName), v))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// TimeContains applies the Contains predicate on the "time" field.
func TimeContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTime), v))
	})
}

// TimeHasPrefix applies the HasPrefix predicate on the "time" field.
func TimeHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTime), v))
	})
}

// TimeHasSuffix applies the HasSuffix predicate on the "time" field.
func TimeHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTime), v))
	})
}

// TimeEqualFold applies the EqualFold predicate on the "time" field.
func TimeEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTime), v))
	})
}

// TimeContainsFold applies the ContainsFold predicate on the "time" field.
func TimeContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTime), v))
	})
}

// ImprovementEQ applies the EQ predicate on the "improvement" field.
func ImprovementEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImprovement), v))
	})
}

// ImprovementNEQ applies the NEQ predicate on the "improvement" field.
func ImprovementNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImprovement), v))
	})
}

// ImprovementIn applies the In predicate on the "improvement" field.
func ImprovementIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImprovement), v...))
	})
}

// ImprovementNotIn applies the NotIn predicate on the "improvement" field.
func ImprovementNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImprovement), v...))
	})
}

// ImprovementGT applies the GT predicate on the "improvement" field.
func ImprovementGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImprovement), v))
	})
}

// ImprovementGTE applies the GTE predicate on the "improvement" field.
func ImprovementGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImprovement), v))
	})
}

// ImprovementLT applies the LT predicate on the "improvement" field.
func ImprovementLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImprovement), v))
	})
}

// ImprovementLTE applies the LTE predicate on the "improvement" field.
func ImprovementLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImprovement), v))
	})
}

// ImprovementContains applies the Contains predicate on the "improvement" field.
func ImprovementContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImprovement), v))
	})
}

// ImprovementHasPrefix applies the HasPrefix predicate on the "improvement" field.
func ImprovementHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImprovement), v))
	})
}

// ImprovementHasSuffix applies the HasSuffix predicate on the "improvement" field.
func ImprovementHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImprovement), v))
	})
}

// ImprovementEqualFold applies the EqualFold predicate on the "improvement" field.
func ImprovementEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImprovement), v))
	})
}

// ImprovementContainsFold applies the ContainsFold predicate on the "improvement" field.
func ImprovementContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImprovement), v))
	})
}

// ServerEQ applies the EQ predicate on the "server" field.
func ServerEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServer), v))
	})
}

// ServerNEQ applies the NEQ predicate on the "server" field.
func ServerNEQ(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServer), v))
	})
}

// ServerIn applies the In predicate on the "server" field.
func ServerIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldServer), v...))
	})
}

// ServerNotIn applies the NotIn predicate on the "server" field.
func ServerNotIn(vs ...string) predicate.RecordSh {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldServer), v...))
	})
}

// ServerGT applies the GT predicate on the "server" field.
func ServerGT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServer), v))
	})
}

// ServerGTE applies the GTE predicate on the "server" field.
func ServerGTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServer), v))
	})
}

// ServerLT applies the LT predicate on the "server" field.
func ServerLT(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServer), v))
	})
}

// ServerLTE applies the LTE predicate on the "server" field.
func ServerLTE(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServer), v))
	})
}

// ServerContains applies the Contains predicate on the "server" field.
func ServerContains(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServer), v))
	})
}

// ServerHasPrefix applies the HasPrefix predicate on the "server" field.
func ServerHasPrefix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServer), v))
	})
}

// ServerHasSuffix applies the HasSuffix predicate on the "server" field.
func ServerHasSuffix(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServer), v))
	})
}

// ServerEqualFold applies the EqualFold predicate on the "server" field.
func ServerEqualFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServer), v))
	})
}

// ServerContainsFold applies the ContainsFold predicate on the "server" field.
func ServerContainsFold(v string) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServer), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RecordSh) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RecordSh) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RecordSh) predicate.RecordSh {
	return predicate.RecordSh(func(s *sql.Selector) {
		p(s.Not())
	})
}
