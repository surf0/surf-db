// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/ent/recordksf"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// RecordKsf is the model entity for the RecordKsf schema.
type RecordKsf struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Timestamp holds the value of the "timestamp" field.
	Timestamp time.Time `json:"timestamp,omitempty"`
	// PlayerName holds the value of the "player_name" field.
	PlayerName string `json:"player_name,omitempty"`
	// MapName holds the value of the "map_name" field.
	MapName string `json:"map_name,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// Improvement holds the value of the "improvement" field.
	Improvement string `json:"improvement,omitempty"`
	// Server holds the value of the "server" field.
	Server string `json:"server,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecordKsf) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case recordksf.FieldID, recordksf.FieldPlayerName, recordksf.FieldMapName, recordksf.FieldTime, recordksf.FieldImprovement, recordksf.FieldServer:
			values[i] = new(sql.NullString)
		case recordksf.FieldTimestamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RecordKsf", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecordKsf fields.
func (rk *RecordKsf) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recordksf.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rk.ID = value.String
			}
		case recordksf.FieldTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timestamp", values[i])
			} else if value.Valid {
				rk.Timestamp = value.Time
			}
		case recordksf.FieldPlayerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field player_name", values[i])
			} else if value.Valid {
				rk.PlayerName = value.String
			}
		case recordksf.FieldMapName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field map_name", values[i])
			} else if value.Valid {
				rk.MapName = value.String
			}
		case recordksf.FieldTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				rk.Time = value.String
			}
		case recordksf.FieldImprovement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field improvement", values[i])
			} else if value.Valid {
				rk.Improvement = value.String
			}
		case recordksf.FieldServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server", values[i])
			} else if value.Valid {
				rk.Server = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RecordKsf.
// Note that you need to call RecordKsf.Unwrap() before calling this method if this RecordKsf
// was returned from a transaction, and the transaction was committed or rolled back.
func (rk *RecordKsf) Update() *RecordKsfUpdateOne {
	return (&RecordKsfClient{config: rk.config}).UpdateOne(rk)
}

// Unwrap unwraps the RecordKsf entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rk *RecordKsf) Unwrap() *RecordKsf {
	_tx, ok := rk.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecordKsf is not a transactional entity")
	}
	rk.config.driver = _tx.drv
	return rk
}

// String implements the fmt.Stringer.
func (rk *RecordKsf) String() string {
	var builder strings.Builder
	builder.WriteString("RecordKsf(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rk.ID))
	builder.WriteString("timestamp=")
	builder.WriteString(rk.Timestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("player_name=")
	builder.WriteString(rk.PlayerName)
	builder.WriteString(", ")
	builder.WriteString("map_name=")
	builder.WriteString(rk.MapName)
	builder.WriteString(", ")
	builder.WriteString("time=")
	builder.WriteString(rk.Time)
	builder.WriteString(", ")
	builder.WriteString("improvement=")
	builder.WriteString(rk.Improvement)
	builder.WriteString(", ")
	builder.WriteString("server=")
	builder.WriteString(rk.Server)
	builder.WriteByte(')')
	return builder.String()
}

// RecordKsfs is a parsable slice of RecordKsf.
type RecordKsfs []*RecordKsf

func (rk RecordKsfs) config(cfg config) {
	for _i := range rk {
		rk[_i].config = cfg
	}
}
